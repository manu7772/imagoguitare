<?php

namespace site\adminsiteBundle\Entity;

use Labo\Bundle\AdminBundle\Entity\nestedRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Labo\Bundle\AdminBundle\services\aeData;

use \Exception;

/**
 * categorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class categorieRepository extends nestedRepository {

	// protected function selectCategoriesForTree(&$qb, $elem, $shortCutContext = false) {
	// 	$qb->select($elem.'.id id');
	// 	// context by statut
	// 	if($shortCutContext == false) $this->contextStatut($qb, $elem);
	// 	$validFields = $this->getFields();
	// 	$fields = array(
	// 		// single
	// 		// 'id' => 'id', // id inutile / déjà précisé en début de méthode
	// 		'nom' => 'text',
	// 		'open' => 'opened',
	// 		'couleur' => 'color',
	// 		'type' => 'type_accept',
	// 		// association
	// 		// 'subEntitys' => array('id' => 'subEntitysId'),
	// 		'statut' => array('niveau' => 'niveau', 'bundles' => 'bundles'),
	// 		// 'stat' => array('niveau', 'bundles'),
	// 		);
	// 	foreach ($fields as $field => $name) {
	// 		if(!is_string($field) && is_array($name)) {
	// 			throw new Exception("Champ manquant : vous devez préciser le nom ou l'alias du champ pour ".json_encode($name).".", 1);
	// 		}
	// 		if(!is_string($field) && is_string($name)) $field = $name;
	// 		if(!is_array($name)) $names = array($name); else $names = $name;
	// 		if('single' === $validFields[$field]['type']) {
	// 			// FIELD (single)
	// 			foreach ($names as $name => $dataName) {
	// 				$qb->addSelect($elem.'.'.$field.' '.$dataName);
	// 			}
	// 		} else if('association' === $validFields[$field]['type']) {
	// 			// ALIAS (association)
	// 			// création de l'alias s'il n'existe pas
	// 			if(!$this->aliasExists($qb, $field)) $qb->join($elem.'.'.$field, $field);
	// 			foreach ($names as $name => $dataName) {
	// 				$qb->addSelect($field.'.'.$name.' '.$dataName);
	// 			}
	// 		} else {
	// 			// throw new Exception("- ".$elem." : champ \"".$field."\" indéfini !", 1);
	// 		}
	// 	}
	// 	// add class_name column
	// 	$qb->addSelect($elem.' class_name');
	// 	// groupBy
	// 	$qb->addGroupBy($elem.'.id');
	// }

	// public function findSimpleScalarArticles($onlyActive = false) {
	// 	$qb = $this->createQueryBuilder(self::ELEMENT)
	// 		->join(self::ELEMENT.'.statut', 's')
	// 		->leftJoin(self::ELEMENT.'.serialnumbers', 'sery')
	// 		->leftJoin('sery.user', 'user')
	// 		->select(
	// 			self::ELEMENT.'.id id',
	// 			self::ELEMENT.'.nom nom',
	// 			self::ELEMENT.'.slug slug',
	// 			's.nom statut_nom',
	// 			'count(sery.id) number_series',
	// 			'count(user.id) number_users'
	// 			)
	// 		->groupBy(self::ELEMENT.'.id')
	// 		;
	// 	if($onlyActive === true) $qb = $this->defaultStatut($qb);
	// 	return $qb->getQuery()->getScalarResult();
	// }

	/**
	 * Renvoie les éléments root de catégories
	 * @param boolean $shortCutContext = false
	 * @return array
	 */
	public function findForList($shortCutContext = false) {
		return $this->findAll($shortCutContext);
		// return $this->findRoots($shortCutContext);
	}

	/**
	 * Renvoie les éléments root de catégories
	 * @param string/array $types = null
	 * @param boolean $shortCutContext = false
	 * @return array
	 */
	public function findRoots($types = null, $shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		if($types != null) $this->getElementsBySubType($types, $qb, $shortCutContext);
			else if($shortCutContext == false) $this->contextStatut($qb);
		$this->getRoots($qb);
		return $qb->getQuery()->getResult();
	}

	/**
	 * Renvoie les collections (niveau 2) de type
	 * @param string/array $types = null
	 * @param boolean $shortCutContext = false
	 * @return array
	 */
	public function findCollectionsByType($type = null, $level = 1, $shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		// if($types != null) $this->getElementsBySubType($types, $qb, $shortCutContext);
		$qb->where(self::ELEMENT.'.type = :type')
			->setParameter('type', $type);
		if($level != null) $this->getByLevel((integer)$level, $qb);
			else $this->excludeRoots($qb);
		if($shortCutContext == false) $this->contextStatut($qb);
		return $qb->getQuery()->getResult();
	}

	/**
	 * Renvoie les éléments root de catégories
	 * @param boolean $shortCutContext = false
	 * @return array
	 */
	public function findLevel($level = 0, $types = null, $shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		if($types != null) $this->getElementsBySubType($types, $qb, $shortCutContext);
		if($shortCutContext == false) $this->contextStatut($qb);
		$this->getByLevel($level, $qb);
		return $qb->getQuery()->getResult();
	}

	// public function findWithArrayOfIdsWithChilds($ids, $levels = 1, $shortCutContext = false) {
	// 	$qb = $this->createQueryBuilder(self::ELEMENT);
	// 	$qb->where($qb->expr()->in(self::ELEMENT.'.id', '?1'))
	// 		->setParameter('1', $ids);
	// 		;
	// 	// équivalent :
	// 	// $qb->where(self::ELEMENT.'.id IN (:ids)')
	// 	// 	->setParameter('ids', $ids, \Doctrine\DBAL\Connection::PARAM_STR_ARRAY)
	// 	// 	;
	// 	if($shortCutContext == false) $this->contextStatut($qb);
	// 	return $qb->getQuery()->getArrayResult();
	// }

	/********************************/
	/*** CLOSURES                 ***/
	/********************************/

	// public function defaultValsListClosure(ContainerInterface $container = null, $data = null, $entity = null) {
	// 	$qb = parent::defaultValsListClosure($container, $data, $entity);
	// 	// if(is_object($entity)) if(method_exists($entity, 'getType')) {
	// 	// 	$exp = explode('_', $entity->getType());
	// 	// 	if(count($exp) == 3) {
	// 	// 		$qb->andWhere(self::ELEMENT.'.'.$exp[1].' = '.$exp[2]);
	// 	// 	}
	// 	// }
	// 	// echo('<p>Returns : <p>'.implode('</p><p>- ', $qb->getQuery()->getResult()).'</p></p>');
	// 	// resultat
	// 	return $qb;
	// }


	// Select selon ACCEPT / But root
	public function getElementsBySubTypeButRoot($types, &$qb = null, $shortCutContext = false) {
		$qb = $this->getElementsBySubType($types, $qb, $shortCutContext);
		return $this->excludeRoots($qb);
	}

	// Select diaporamas with no children an with elements (at least one) / But root
	public function getDiaporamas($shortCutContext = false) {
		$qb = $this->getElementsByType('diapo', $qb, $shortCutContext);
		// where categorie has no child
		// $qb->leftJoin(self::ELEMENT.'.nestedpositionChilds', 'npc1', "WITH", 'npc1.group = \'categorie_nested\'');
		// where categorie has at least one element
		$qb->innerJoin(self::ELEMENT.'.nestedpositionChilds', 'npc2', "WITH", 'npc2.group = \'nesteds\'')
			// ->andWhere('npc2.group = :nest')
			// ->setParameter('nest', 'nesteds')
			;
		return $this->excludeRoots($qb);
	}

	// Select selon ACCEPT
	public function getElementsBySubType($types, &$qb = null, $shortCutContext = false) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		if(is_string($types)) $types = array($types);
		foreach ($types as $type) {
			$qb->orWhere($qb->expr()->orX($qb->expr()->like(self::ELEMENT.'.accepts', $qb->expr()->literal('%'.$type.'%'))));
		}
		if($shortCutContext == false) $this->contextStatut($qb);
		// resultat
		return $qb;
	}

	public function getElementsByTypeButRoot($types, &$qb = null, $shortCutContext = false) {
		$qb = $this->getElementsByType($types, $qb, $shortCutContext);
		return $this->excludeRoots($qb);
	}

	public function getElementsByType($types, &$qb = null, $shortCutContext = false) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		if(is_string($types)) $types = array($types);
		foreach ($types as $type) {
			$qb->orWhere(self::ELEMENT.'.type = :type')->setParameter('type', $type);
		}
		if($shortCutContext == false) $this->contextStatut($qb);
		// resultat
		return $qb;
	}


	public function getElementsButCategories($categories, &$qb = null) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		if(is_object($categories)) $categories = array($categories);
		foreach ($categories as $categorie) if($categorie->getId() != null) {
			$qb->andWhere(self::ELEMENT.'.id != :id')
				->setParameter('id', $categorie->getId())
			;
		}
		// resultat
		return $qb;
	}

	public function getByLevel($level = 0, &$qb = null) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->andWhere(self::ELEMENT.'.lvl = :level')
			->setParameter('level', intval($level))
			;
		// resultat
		return $qb;
	}

	public function getRoots(&$qb = null) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->andWhere(self::ELEMENT.'.lvl = 0');
		// resultat
		return $qb;
	}

	public function excludeRoots(&$qb = null) {
		if($qb == null) $qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->andWhere(self::ELEMENT.'.lvl != 0');
		// resultat
		return $qb;
	}

}
