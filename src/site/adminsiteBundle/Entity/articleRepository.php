<?php

namespace site\adminsiteBundle\Entity;

use Labo\Bundle\AdminBundle\Entity\itemRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Labo\Bundle\AdminBundle\services\aeData;

/**
 * articleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class articleRepository extends itemRepository {

	public function defaultValsListClosure(ContainerInterface $container = null, $data = null, $entity = null) {
		$qb = parent::defaultValsListClosure($container, $data, $entity);
		if(is_object($data)) {
			$id = $data->getId();
			if($id != null) {
				// exclut lui-mÃªme
				$qb->andWhere(self::ELEMENT.'.id != :id')
					->setParameter('id', $id)
					;
			}
		}
		// resultat
		return $qb;
	}

	public function findArticleBySlug($slug, $parentSlug = null, $shortCutContext = false) {
		$qb = $this->createQueryBuilder(self::ELEMENT);
		$qb->where(self::ELEMENT.'.slug = :slug')
			->setParameter('slug', $slug)
			;
		$this->contextStatut($qb, self::ELEMENT, $shortCutContext);
		// image
		$qb->leftJoin(self::ELEMENT.'.image', 'image')
			->addSelect('image.id imageId')
			;
		// $this->contextStatut($qb, 'image', $shortCutContext);
		// parents
		$qb->leftJoin(self::ELEMENT.'.nestedpositionParents', 'nestParents')
			->addSelect('nestParents')
			->leftJoin('nestParents.parent', 'parents')
			->addSelect('parents')
			;
		// $this->contextStatut($qb, 'parents', $shortCutContext);
		if($parentSlug !== null)
			$qb->andWhere('parents.slug = :parentSlug')
				->setParameter('parentSlug', $parentSlug)
			;
		// chilrend
		$qb->leftJoin(self::ELEMENT.'.nestedpositionChilds', 'nestChilds')
			->addSelect('nestChilds')
			->orderBy('nestChilds.position', 'asc')
			->leftJoin('nestChilds.child', 'children')
			->addSelect('children')
			;
		// $this->contextStatut($qb, 'children', $shortCutContext);
		$result = $qb->getQuery()->getArrayResult();
		// if(!isset($result[0][0])) echo('<h2>Not found</h2>');
		// echo('<pre>');var_dump($result);die('</pre>');
		if(isset($result[0][0])) {
			foreach ($result[0] as $key => $value) if($key !== 0) {
				$result[0][0][$key] = $value;
			}
			// echo('<pre>');var_dump($result[0][0]);die('</pre>');
			return $result[0][0];
		}
		return false;
	}

}
